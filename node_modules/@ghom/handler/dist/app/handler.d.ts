import chokidar from "chokidar";
export interface HandlerOptions<Data> {
    /**
     * File basename pattern to filter files
     */
    pattern?: RegExp;
    /**
     * @default false
     */
    hotReload?: boolean;
    /**
     * @default 100
     */
    hotReloadTimeout?: number;
    /**
     * If you want to log the file loading process, you can set up a logger. <br>
     * The logger must have a log method that accepts a string as a parameter. <br>
     * @example ```ts
     * const handler = new Handler("./commands", {
     *   logger: console
     * })
     * ```
     */
    logger?: {
        log: (message: string) => void;
    };
    /**
     * Use $path to replace by file path <br>
     * Use $basename to replace by file name <br>
     * Use $filename to replace by file name without extension <br>
     * @example ```ts
     * const handler = new Handler("./commands", {
     *   loggerPattern: "$filename loaded"
     *   logger: console
     * })
     * ```
     */
    loggerPattern?: string;
    /**
     * This method will load the file and return the data. <br>
     * The data will be stored in the {@link Handler.elements} map.
     */
    loader: (path: string) => Promise<Data>;
    /**
     * This method will be called when the file is loaded. <br>
     * The data will be transferred from the {@link loader} method.
     */
    onLoad?: (path: string, data: Data) => Promise<void>;
    /**
     * If this function is defined, the changed files will stop
     * going through the {@link onLoad} function and go through this one instead
     */
    onChange?: (path: string, data: Data) => Promise<void>;
    /**
     * This method will be called when the file is removed.
     */
    onRemove?: (path: string, oldData: Data) => Promise<void>;
    /**
     * This method will be called after all files are loaded, at the end of the {@link Handler.init} method.
     */
    onFinish?: (data: Map<string, Data>) => Promise<void>;
}
export declare class Handler<Data> {
    private dirname;
    private options;
    elements: Map<string, Data>;
    md5: Map<string, string>;
    watcher?: chokidar.FSWatcher;
    constructor(dirname: string, options: HandlerOptions<Data>);
    init(this: this): Promise<void>;
    destroy(this: this): void;
    private _load;
    private _remove;
}
