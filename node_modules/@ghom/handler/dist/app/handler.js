"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Handler = void 0;
const path_1 = __importDefault(require("path"));
const md5_1 = __importDefault(require("md5"));
const fs_1 = __importDefault(require("fs"));
const chokidar_1 = __importDefault(require("chokidar"));
class Handler {
    constructor(dirname, options) {
        this.dirname = dirname;
        this.options = options;
        this.elements = new Map();
        this.md5 = new Map();
    }
    async init() {
        this.elements.clear();
        const filenames = await fs_1.default.promises.readdir(this.dirname);
        for (const basename of filenames) {
            const filepath = path_1.default.join(this.dirname, basename);
            try {
                await this._load(filepath, false);
            }
            catch (error) {
                if (error.message.startsWith("Ignored"))
                    continue;
                else
                    throw error;
            }
        }
        await this.options.onFinish?.(this.elements);
        if (this.options.hotReload)
            this.watcher = chokidar_1.default
                .watch(path_1.default.join(this.dirname, "*.*"))
                .on("all", async (event, filepath) => {
                try {
                    switch (event) {
                        case "add":
                        case "change":
                            await this._load(filepath, event === "change");
                            break;
                        case "unlink":
                            await this._remove(filepath);
                            break;
                    }
                }
                catch (error) {
                    if (error.message.startsWith("Ignored"))
                        return;
                    else
                        throw error;
                }
            });
    }
    destroy() {
        this.watcher?.close();
        this.elements.clear();
        this.md5.clear();
    }
    async _load(filepath, reloaded) {
        const basename = path_1.default.basename(filepath);
        const filename = path_1.default.basename(filepath, path_1.default.extname(filepath));
        if (this.options.pattern && !this.options.pattern.test(basename))
            throw new Error(`Ignored ${basename} by pattern`);
        if (this.options.hotReload) {
            const md5sum = (0, md5_1.default)(fs_1.default.readFileSync(filepath));
            if (this.md5.get(filepath) === md5sum)
                throw new Error(`Ignored ${basename} by md5 check`);
            else
                this.md5.set(filepath, md5sum);
        }
        if (this.options.logger)
            this.options.logger.log(this.options.loggerPattern
                ? this.options.loggerPattern
                    .replace("$path", filepath)
                    .replace("$basename", basename)
                    .replace("$filename", filename)
                : `loaded ${filename}`);
        let loaded;
        const onLoad = reloaded
            ? this.options.onChange ?? this.options.onLoad
            : this.options.onLoad;
        loaded = await this.options.loader(filepath);
        this.elements.set(filepath, loaded);
        if (onLoad) {
            await onLoad(filepath, loaded);
        }
    }
    async _remove(filepath) {
        const basename = path_1.default.basename(filepath);
        const filename = path_1.default.basename(filepath, path_1.default.extname(filepath));
        if (this.options.pattern && !this.options.pattern.test(basename))
            throw new Error(`Ignored ${basename} by pattern`);
        if (!this.elements.has(filepath))
            throw new Error(`Ignored ${basename} because isn't loaded`);
        if (this.options.logger)
            this.options.logger.log(this.options.loggerPattern
                ? this.options.loggerPattern
                    .replace("$path", filepath)
                    .replace("$basename", basename)
                    .replace("$filename", filename)
                : `removed ${filename}`);
        const data = this.elements.get(filepath);
        this.elements.delete(filepath);
        this.md5.delete(filepath);
        await this.options.onRemove?.(filepath, data);
    }
}
exports.Handler = Handler;
