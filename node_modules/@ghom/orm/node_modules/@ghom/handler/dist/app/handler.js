"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Handler = void 0;
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
class Handler {
    constructor(path, options) {
        this.path = path;
        this.options = options;
        this.elements = new Map();
    }
    /**
     * Here to prevent breaking changes.
     * @deprecated Use `load` instead.
     */
    async load() {
        await this.init();
    }
    async init() {
        this.elements.clear();
        const filenames = await promises_1.default.readdir(this.path);
        const filepathList = [];
        for (const basename of filenames) {
            if (this.options?.pattern && !this.options.pattern.test(basename))
                continue;
            const filepath = path_1.default.join(this.path, basename);
            const filename = path_1.default.basename(filepath, path_1.default.extname(filepath));
            filepathList.push(filepath);
            if (this.options?.logger)
                this.options.logger.log(this.options.loggerPattern
                    ? this.options.loggerPattern
                        .replace("$path", filepath)
                        .replace("$basename", basename)
                        .replace("$filename", filename)
                    : `loaded ${filename}`);
            if (this.options?.loader)
                this.elements.set(filepath, await this.options.loader(filepath));
            await this.options?.onLoad?.(filepath);
        }
        await this.options?.onFinish?.(filepathList);
    }
}
exports.Handler = Handler;
