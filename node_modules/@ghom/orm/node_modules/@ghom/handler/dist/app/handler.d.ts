export interface HandlerOptions<Element> {
    logger?: {
        log: (message: string) => void;
    };
    /**
     * Use $path to replace by file path <br>
     * Use $basename to replace by file name <br>
     * Use $filename to replace by file name without extension <br>
     * @example ```ts
     * const handler = new Handler("./commands", {
     *   loggerPattern: "$filename loaded"
     *   logger: console
     * })
     * ```
     */
    loggerPattern?: string;
    loader?: (path: string) => Promise<Element>;
    pattern?: RegExp;
    onLoad?: (path: string) => Promise<void>;
    onFinish?: (paths: string[]) => Promise<void>;
}
export declare class Handler<Element> {
    private path;
    private options?;
    elements: Map<string, Element>;
    constructor(path: string, options?: HandlerOptions<Element> | undefined);
    /**
     * Here to prevent breaking changes.
     * @deprecated Use `load` instead.
     */
    load(): Promise<void>;
    init(): Promise<void>;
}
