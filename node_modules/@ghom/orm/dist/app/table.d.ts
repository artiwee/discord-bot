import { Knex } from "knex";
import { ORM } from "./orm.js";
import { ResponseCache } from "./caching.js";
export interface MigrationData {
    table: string;
    version: number;
}
export interface TableOptions<Type extends object = object> {
    name: string;
    description?: string;
    priority?: number;
    /**
     * The cache time in milliseconds. <br>
     * Default is `Infinity`.
     */
    caching?: number;
    migrations?: {
        [version: number]: (table: Knex.CreateTableBuilder) => void;
    };
    then?: (this: Table<Type>, table: Table<Type>) => unknown;
    setup: (table: Knex.CreateTableBuilder) => void;
}
export declare class Table<Type extends object = object> {
    readonly options: TableOptions<Type>;
    orm?: ORM;
    _whereCache?: ResponseCache<[
        cb: (query: Table<Type>["query"]) => unknown
    ], unknown>;
    _countCache?: ResponseCache<[where: string | null], Promise<number>>;
    constructor(options: TableOptions<Type>);
    get db(): Knex<any, any[]>;
    get query(): Knex.QueryBuilder<Type, {
        _base: Type;
        _hasSelection: false;
        _keys: never;
        _aliases: {};
        _single: false;
        _intersectProps: {};
        _unionProps: never;
    }[]>;
    get cache(): {
        get: <Return>(id: string, cb: (table: Pick<Table<Type>["query"], "select" | "count" | "avg" | "sum" | "countDistinct" | "avgDistinct" | "sumDistinct">) => Return) => Return;
        set: <Return_1>(cb: (table: Pick<Table<Type>["query"], "update" | "delete" | "insert" | "upsert" | "truncate" | "jsonInsert">) => Return_1) => Return_1;
        count: (where?: string) => Promise<number>;
        invalidate: () => void;
    };
    count(where?: string): Promise<number>;
    hasColumn(name: keyof Type & string): Promise<boolean>;
    getColumn(name: keyof Type & string): Promise<Knex.ColumnInfo>;
    getColumns(): Promise<Record<keyof Type & string, Knex.ColumnInfo>>;
    getColumnNames(): Promise<Array<keyof Type & string>>;
    isEmpty(): Promise<boolean>;
    make(): Promise<this>;
    private migrate;
}
