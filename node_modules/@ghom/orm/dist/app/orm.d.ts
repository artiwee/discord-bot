import { Handler } from "@ghom/handler";
import { Knex } from "knex";
import { TextStyle } from "./util.js";
import { Table } from "./table.js";
import { ResponseCache } from "./caching.js";
export interface ILogger {
    log: (message: string) => void;
    error: (error: string | Error) => void;
    warn: (warning: string) => void;
}
export interface ORMConfig {
    /**
     * path to the directory that contains js files of tables
     */
    tableLocation: string;
    /**
     * database configuration
     */
    database?: Knex.Config;
    /**
     * Logger used to log the table files loaded or created.
     */
    logger?: ILogger;
    /**
     * Pattern used on logs when the table files are loaded or created. <br>
     * Based on node:util.styleText style names.
     */
    loggerStyles?: {
        highlight: TextStyle;
        rawValue: TextStyle;
        description: TextStyle;
    };
    /**
     * Configuration for the database backups.
     */
    backups?: {
        location?: string;
        chunkSize?: number;
    };
    /**
     * The cache time in milliseconds. <br>
     * Default is `Infinity`.
     */
    caching?: number;
}
export declare class ORM {
    config: ORMConfig;
    private _ready;
    database: Knex;
    handler: Handler<Table<any>>;
    _rawCache: ResponseCache<[sql: string], Knex.Raw>;
    constructor(config: ORMConfig);
    get cachedTables(): Table<any>[];
    get cachedTableNames(): string[];
    hasCachedTable(name: string): boolean;
    hasTable(name: string): Promise<boolean>;
    /**
     * Handle the table files and create the tables in the database.
     */
    init(): Promise<void>;
    raw(sql: Knex.Value): Knex.Raw;
    cache: {
        raw: (sql: string, anyDataUpdated?: boolean) => Knex.Raw;
        invalidate: () => void;
    };
    clientBasedOperation<Return>(operation: Partial<Record<"pg" | "mysql2" | "sqlite3", () => Return>>): Return | undefined;
    /**
     * Create a backup of the database. <br>
     * The backup will be saved in the location specified in the config.
     */
    createBackup(dirname?: string): Promise<void>;
    /**
     * Restore the database from the backup. <br>
     * @warning This will delete all the data in the tables.
     */
    restoreBackup(dirname?: string): Promise<void>;
}
