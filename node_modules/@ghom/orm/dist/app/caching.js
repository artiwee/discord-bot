/**
 * Advanced cache for async queries
 */
export class ResponseCache {
    _request;
    _timeout;
    _cache = new Map();
    constructor(_request, _timeout) {
        this._request = _request;
        this._timeout = _timeout;
    }
    get(id, ...params) {
        const cached = this._cache.get(id);
        if (!cached || cached.expires < Date.now()) {
            this._cache.set(id, {
                value: this._request(...params),
                expires: Date.now() + this._timeout,
            });
        }
        return this._cache.get(id).value;
    }
    fetch(id, ...params) {
        this._cache.set(id, {
            value: this._request(...params),
            expires: Date.now() + this._timeout,
        });
        return this._cache.get(id).value;
    }
    invalidate(id) {
        if (!id) {
            this._cache.clear();
            return;
        }
        this._cache.delete(id);
    }
}
