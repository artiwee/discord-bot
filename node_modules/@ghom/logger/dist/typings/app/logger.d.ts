export declare enum LoggerLevels {
    WARN = 0,
    ERROR = 1,
    INFO = 2,
    SUCCESS = 3
}
export type LoggerLevel = keyof typeof LoggerLevels;
export type LoggerColors = Record<LoggerLevels, string> & {
    secondaryText: string;
};
export type LoggerPattern = (text: string, config: {
    level: LoggerLevels;
    colors: LoggerColors;
}, secondaryText?: string) => string;
export type LoggerRender = (out: any) => any;
export type LoggerRenders = Record<LoggerLevels, LoggerRender>;
export declare function loggerLevelName(level: LoggerLevels): LoggerLevel;
export declare function formatLoggerLevelName(levelName: LoggerLevel): string;
export declare const defaultLoggerPattern: LoggerPattern;
export declare const defaultLoggerColors: LoggerColors;
export declare const defaultLoggerRenders: LoggerRenders;
export interface LoggerOptions {
    section?: string;
    pattern?: LoggerPattern;
    colors?: LoggerColors;
    renders?: LoggerRenders;
}
export declare class Logger {
    private readonly section?;
    private readonly pattern;
    private readonly colors;
    private readonly renders;
    constructor(options?: LoggerOptions);
    log(this: this, text: string): void;
    error(this: this, text: string | Error, _path?: string, full?: boolean): void;
    warn(this: this, text: string): void;
    success(this: this, text: string): void;
}
