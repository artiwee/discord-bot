import chalk from "chalk";
import dayjs from "dayjs";
export var LoggerLevels;
(function (LoggerLevels) {
    LoggerLevels[LoggerLevels["WARN"] = 0] = "WARN";
    LoggerLevels[LoggerLevels["ERROR"] = 1] = "ERROR";
    LoggerLevels[LoggerLevels["INFO"] = 2] = "INFO";
    LoggerLevels[LoggerLevels["SUCCESS"] = 3] = "SUCCESS";
})(LoggerLevels || (LoggerLevels = {}));
export function loggerLevelName(level) {
    return Object.keys(LoggerLevels).find((key) => LoggerLevels[key] === level);
}
export function formatLoggerLevelName(levelName) {
    const maxLength = Math.max(...Object.keys(LoggerLevels).map((key) => key.length));
    return levelName.padStart(maxLength, " ");
}
export const defaultLoggerPattern = (text, config, secondaryText) => {
    return `${chalk.grey(dayjs().format("DD/MM/YY HH:mm"))} ${chalk.hex(config.colors[config.level])(formatLoggerLevelName(loggerLevelName(config.level)))}${secondaryText
        ? " " + chalk.hex(config.colors.secondaryText)(`${secondaryText}`)
        : ""} ${text}`;
};
export const defaultLoggerColors = {
    [LoggerLevels.WARN]: "#ffa600",
    [LoggerLevels.ERROR]: "#ff0000",
    [LoggerLevels.INFO]: "#00ffff",
    [LoggerLevels.SUCCESS]: "#00ff00",
    secondaryText: "#ff3fa8",
};
export const defaultLoggerRenders = {
    [LoggerLevels.WARN]: console.warn,
    [LoggerLevels.ERROR]: console.error,
    [LoggerLevels.INFO]: console.log,
    [LoggerLevels.SUCCESS]: console.log,
};
export class Logger {
    section;
    pattern;
    colors;
    renders;
    constructor(options) {
        this.section = options?.section;
        this.pattern = options?.pattern ?? defaultLoggerPattern;
        this.colors = options?.colors ?? defaultLoggerColors;
        this.renders = options?.renders ?? defaultLoggerRenders;
    }
    log(text) {
        this.renders[LoggerLevels.INFO](this.pattern(text, { level: LoggerLevels.INFO, colors: this.colors }, this.section));
    }
    error(text, _path, full) {
        this.renders[LoggerLevels.ERROR](this.pattern(text instanceof Error ? text.message : text, { level: LoggerLevels.ERROR, colors: this.colors }, _path ?? this.section));
        if (full && text instanceof Error)
            this.renders[LoggerLevels.ERROR](text);
    }
    warn(text) {
        this.renders[LoggerLevels.WARN](this.pattern(text, { level: LoggerLevels.WARN, colors: this.colors }, this.section));
    }
    success(text) {
        this.renders[LoggerLevels.SUCCESS](this.pattern(text, { level: LoggerLevels.SUCCESS, colors: this.colors }, this.section));
    }
}
