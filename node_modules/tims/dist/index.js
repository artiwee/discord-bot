"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.duration = exports.between = exports.since = void 0;
const languages_1 = require("./languages");
const durations_1 = require("./durations");
function resolve(date) {
    return typeof date === "number" ? date : date.getTime();
}
/** Get the sentence of time past since given moment */
function since(date, options) {
    return duration(Date.now() - resolve(date), options);
}
exports.since = since;
/** Get the sentence of time between given moments */
function between(date1, date2, options) {
    const time1 = resolve(date1), time2 = resolve(date2);
    return duration(Math.max(time1, time2) - Math.min(time1, time2), options);
}
exports.between = between;
/** Get the sentence of given duration */
function duration(date, options = {}) {
    let ms = resolve(date);
    let { format, locale, full, maxPartCount } = options;
    const cache = {};
    const counters = {
        year: 0,
        month: 0,
        day: 0,
        hour: 0,
        minute: 0,
        second: 0,
        ms: 0,
    };
    if (!format)
        format = "second";
    if (!locale)
        locale = "en";
    for (const key of Object.keys(counters)) {
        if (!durations_1.isDuration(key))
            continue;
        while (ms >= durations_1.durations[key]) {
            ms -= durations_1.durations[key];
            counters[key]++;
        }
        while (ms <= durations_1.durations[key] * -1) {
            ms += durations_1.durations[key];
            counters[key]++;
        }
        if (!full && !counters[key]) {
            cache[key] = false;
        }
        else {
            const plural = counters[key] > 1;
            const empty = counters[key] === 0;
            cache[key] = languages_1.languages[locale][plural ? "plural" : "singular"][key].replace("{quantifier}", plural
                ? String(Math.floor(counters[key]))
                : languages_1.languages[locale].quantifiers[empty ? "nothing" : "one"]);
        }
    }
    const output = [];
    for (const key of Object.keys(cache)) {
        if (!durations_1.isDuration(key))
            continue;
        if (cache[key]) {
            output.push(cache[key]);
        }
        if (key === format) {
            break;
        }
    }
    if (maxPartCount)
        output.splice(maxPartCount);
    if (output.length > 1) {
        let last = output.pop();
        output[output.length - 1] += ` ${languages_1.languages[locale].and} ${last}`;
    }
    else if (output.length === 0) {
        return languages_1.languages[locale].singular[format].replace("{quantifier}", languages_1.languages[locale].quantifiers.nothing);
    }
    return output.join(", ");
}
exports.duration = duration;
const output = {
    since,
    ago: since,
    fromNow: since,
    between,
    diff: between,
    duration,
    value: duration,
};
exports.default = output;
module.exports = output;
